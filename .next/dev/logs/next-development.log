[00:00:01.326] Server  LOG      ✓ Ready in 836ms
[00:00:03.011] Server  ERROR    ⨯ ./app/page.tsx:22:70
Parsing ecmascript source code failed
  20 |   const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  21 |
> 22 |   const sidebar = { initialWidth: 400, minWidth: 400, maxWidth: 400 })
     |                                                                      ^
  23 |  
  24 |   
  25 |   })

Expected a semicolon


[00:00:04.133] Browser ERROR   uncaughtError: Error: ./app/page.tsx:22:70
Parsing ecmascript source code failed
  20 |   const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  21 |
> 22 |   const sidebar = { initialWidth: 400, minWidth: 400, maxWidth: 400 })
     |                                                                      ^
  23 |  
  24 |   
  25 |   })

Expected a semicolon


[00:00:04.298] Browser ERROR   ./app/page.tsx:22:70
Parsing ecmascript source code failed
  20 |   const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  21 |
> 22 |   const sidebar = { initialWidth: 400, minWidth: 400, maxWidth: 400 })
     |                                                                      ^
  23 |  
  24 |   
  25 |   })

Expected a semicolon
[00:00:04.298] Browser ERROR   ./app/page.tsx:22:70
Parsing ecmascript source code failed
  20 |   const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  21 |
> 22 |   const sidebar = { initialWidth: 400, minWidth: 400, maxWidth: 400 })
     |                                                                      ^
  23 |  
  24 |   
  25 |   })

Expected a semicolon
[00:01:11.709] Server  LOG      ✓ Compiled in 84ms
[00:01:12.042] Server  ERROR    ⨯ ReferenceError: useResizable is not defined
[00:01:12.363] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:01:12.518] Browser ERROR   uncaughtError: ReferenceError: useResizable is not defined
[00:01:29.610] Server  LOG      ✓ Compiled in 42ms
[00:01:29.719] Browser ERROR   ./app/page.tsx:34:4
Parsing ecmascript source code failed
  32 |     maxWidth: 600,
  33 |     offsetX: sidebar.width,
> 34 |   })
     |    ^
  35 |
  36 |   const handleTabChange = (tab: Tab) => {
  37 |     setActiveTab(tab)

Expected a semicolon

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:01:43.724] Browser ERROR   ./app/page.tsx:22:70
Parsing ecmascript source code failed
  20 |   const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  21 |
> 22 |   const sidebar = { initialWidth: 192, minWidth: 150, maxWidth: 400 })
     |                                                                      ^
  23 |
  24 |   })
  25 |

Expected a semicolon

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:02:02.178] Server  WARN     ⚠ Fast Refresh had to perform a full reload due to a runtime error.
[00:02:02.205] Server  LOG      ✓ Compiled in 42ms
[00:02:02.727] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:02:03.021] Browser LOG     %c[Vercel Web Analytics]%c Debug mode is enabled by default in development. No requests will be sent to the server. color: rgb(120, 120, 120) color: inherit
[00:02:03.021] Browser LOG     %c[Vercel Web Analytics]%c Running queued event color: rgb(120, 120, 120) color: inherit pageview {"path":"/","route":"/"}
[00:02:03.021] Browser LOG     %c[Vercel Web Analytics]%c [pageview] http://localhost:3000/ color: rgb(120, 120, 120) color: inherit {"dp":"/","o":"http://localhost:3000/","r":"","sdkn":"@vercel/analytics/next","sdkv":"1.5.0","sv":"0.1.3","ts":1761992614793}
[00:07:27.409] Server  LOG      ✓ Compiled in 40ms
[00:07:28.441] Browser ERROR   ./app/page.tsx:30:3
Parsing ecmascript source code failed
  28 |
  29 |   }
> 30 |   ]
     |   ^
  31 |   const notesList = useResizable({
  32 |     initialWidth: 600,
  33 |     minWidth: 200,

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:07:59.140] Browser ERROR   ./app/page.tsx:43:3
Parsing ecmascript source code failed
   41 |   }
   42 |
>  43 |   return (
      |   ^^^^^^^^
>  44 |     <div className="flex min-h-screen">
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  45 |       <button
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  46 |         onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  47 |         className="fixed top-6 left-6 z-50 md:hidden bg-background border border-border rounded-lg p-2.5 hover:bg-muted shadow-sm"
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  48 |         aria-label="Toggle menu"
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  49 |       >
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  50 |         {mobileMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  51 |       </button>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  52 |
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  53 |       <Sidebar
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  54 |         activeTab={activeTab}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  55 |         onTabChange={handleTabChange}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  56 |         width={sidebar.width}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  57 |         isDragging={sidebar.isDragging}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  58 |         onMouseDown={sidebar.handleMouseDown}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  59 |         mobileMenuOpen={mobileMenuOpen}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  60 |       />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  61 |
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  62 |       {activeTab === "notes" ? (
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  63 |         <>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  64 |           <NotesList
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  65 |             selectedNote={selectedNote}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  66 |             onSelectNote={setSelectedNote}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  67 |             width={notesList.width}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  68 |             isDragging={notesList.isDragging}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  69 |             onMouseDown={notesList.handleMouseDown}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  70 |           />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  71 |           {selectedNote && (
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  72 |             <ContentPanel onClose={() => setSelectedNote(null)}>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  73 |               <NoteReader slug={selectedNote} />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  74 |             </ContentPanel>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  75 |           )}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  76 |         </>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  77 |       ) : activeTab === "bookshelf" ? (
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  78 |         <>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  79 |           <BookshelfList
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  80 |             selectedBook={selectedBook}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  81 |             onSelectBook={setSelectedBook}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  82 |             width={bookList.width}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  83 |             isDragging={bookList.isDragging}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  84 |             onMouseDown={bookList.handleMouseDown}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  85 |           />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  86 |           {selectedBook && (
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  87 |             <ContentPanel onClose={() => setSelectedBook(null)}>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  88 |               <BookReader slug={selectedBook} />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  89 |             </ContentPanel>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  90 |           )}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  91 |         </>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  92 |       ) : (
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  93 |         <main className="flex-1 px-8 md:px-16 max-w-3xl overflow-y-auto pt-28 md:pt-16 flex flex-col justify-between min-h-screen pb-0">
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  94 |           <AboutSection />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  95 |         </main>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  96 |       )}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  97 |
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  98 |       {mobileMenuOpen && (
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  99 |         <div className="fixed inset-0 bg-black/50 z-30 md:hidden" onClick={() => setMobileMenuOpen(false)} />
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 100 |       )}
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 101 |     </div>
      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 102 |   )
      | ^^^^
  103 | }
  104 |

Return statement is not allowed here

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:08:04.719] Browser ERROR   ./app/page.tsx:30:1
Parsing ecmascript source code failed
  28 |
  29 |   }
> 30 | )
     | ^
  31 |   const bookList = useResizable({
  32 |     initialWidth: 600,
  33 |     minWidth: 200,

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:08:12.002] Browser ERROR   ./app/page.tsx:30:1
Parsing ecmascript source code failed
  28 |
  29 |   }
> 30 | )
     | ^
  31 | )
  32 |
  33 |   const handleTabChange = (tab: Tab) => {

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:09:17.989] Browser ERROR   ./app/page.tsx:30:1
Parsing ecmascript source code failed
  28 |
  29 |   }
> 30 | )
     | ^
  31 | )
  32 |
  33 |   }

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:09:22.253] Browser ERROR   ./app/page.tsx:30:1
Parsing ecmascript source code failed
  28 |
  29 |   }
> 30 | )
     | ^
  31 |
  32 |
  33 |   }

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:09:24.229] Browser ERROR   ./app/page.tsx:30:1
Parsing ecmascript source code failed
  28 |
  29 |   }
> 30 | )
     | ^
  31 |
  32 |   }
  33 |

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:09:32.006] Browser ERROR   ./app/page.tsx:34:3
Parsing ecmascript source code failed
  32 |
  33 |
> 34 |   return (
     |   ^^^^^^^^
> 35 |     <div className="flex min-h-screen">
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 36 |       <button
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 37 |         onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 38 |         className="fixed top-6 left-6 z-50 md:hidden bg-background border border-border rounded-lg p-2.5 hover:bg-muted shadow-sm"
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 39 |         aria-label="Toggle menu"
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 40 |       >
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 41 |         {mobileMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 42 |       </button>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 43 |
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 44 |       <Sidebar
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 45 |         activeTab={activeTab}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 46 |         onTabChange={handleTabChange}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 47 |         width={sidebar.width}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 48 |         isDragging={sidebar.isDragging}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 49 |         onMouseDown={sidebar.handleMouseDown}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 50 |         mobileMenuOpen={mobileMenuOpen}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 51 |       />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 52 |
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 53 |       {activeTab === "notes" ? (
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 54 |         <>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 55 |           <NotesList
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 56 |             selectedNote={selectedNote}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 57 |             onSelectNote={setSelectedNote}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 58 |             width={notesList.width}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 59 |             isDragging={notesList.isDragging}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 60 |             onMouseDown={notesList.handleMouseDown}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 61 |           />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 62 |           {selectedNote && (
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 63 |             <ContentPanel onClose={() => setSelectedNote(null)}>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 64 |               <NoteReader slug={selectedNote} />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 65 |             </ContentPanel>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 66 |           )}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 67 |         </>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 68 |       ) : activeTab === "bookshelf" ? (
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 69 |         <>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 70 |           <BookshelfList
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 71 |             selectedBook={selectedBook}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 72 |             onSelectBook={setSelectedBook}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 73 |             width={bookList.width}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 74 |             isDragging={bookList.isDragging}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 75 |             onMouseDown={bookList.handleMouseDown}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 76 |           />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 77 |           {selectedBook && (
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 78 |             <ContentPanel onClose={() => setSelectedBook(null)}>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 79 |               <BookReader slug={selectedBook} />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 80 |             </ContentPanel>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 81 |           )}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 82 |         </>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 83 |       ) : (
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 84 |         <main className="flex-1 px-8 md:px-16 max-w-3xl overflow-y-auto pt-28 md:pt-16 flex flex-col justify-between min-h-screen pb-0">
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 85 |           <AboutSection />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 86 |         </main>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 87 |       )}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 88 |
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 89 |       {mobileMenuOpen && (
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 90 |         <div className="fixed inset-0 bg-black/50 z-30 md:hidden" onClick={() => setMobileMenuOpen(false)} />
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 91 |       )}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 92 |     </div>
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 93 |   )
     | ^^^^
  94 | }
  95 |

Return statement is not allowed here

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:09:59.195] Browser ERROR   ./app/page.tsx:29:1
Parsing ecmascript source code failed
  27 |
  28 |   }
> 29 | )
     | ^
  30 |  )
  31 |
  32 |   const handleTabChange = (tab: Tab) => {

Expression expected

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:10:23.394] Server  LOG      ✓ Compiled in 34ms
[00:12:30.115] Server  LOG      ✓ Compiled in 42ms
[00:12:31.130] Browser ERROR   ./app/page.tsx:5:10
Ecmascript file had an error
  3 | import { useState } from "react"
  4 | import { Menu, X } from "lucide-react"
> 5 | import { useState } from "react"
    |          ^^^^^^^^
  6 | import { Sidebar } from "@/components/sidebar"
  7 | import { AboutSection } from "@/components/about-section"
  8 | import { NotesList } from "@/components/notes-list"

the name `useState` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:12:35.631] Browser ERROR   ./app/page.tsx:5:10
Ecmascript file had an error
  3 | import { useState } from "react"
  4 | import { Menu, X } from "lucide-react"
> 5 | import { useState } from "react"
    |          ^^^^^^^^
  6 | import { Sidebar } from "@/components/sidebar"
  7 | import { AboutSection } from "@/components/about-section"
  8 | import { NotesList } from "@/components/notes-list"

the name `useState` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:13:23.894] Server  LOG      ✓ Compiled in 36ms
[00:13:24.904] Browser ERROR   ./app/page.tsx:5:10
Ecmascript file had an error
  3 | import { useState } from "react"
  4 | import { Menu, X } from "lucide-react"
> 5 | import { useState } from "react"
    |          ^^^^^^^^
  6 | import { Sidebar } from "@/components/sidebar"
  7 | import { AboutSection } from "@/components/about-section"
  8 | import { NotesList } from "@/components/notes-list"

the name `useState` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:13:59.236] Server  LOG      ✓ Compiled in 36ms
[00:14:00.251] Browser ERROR   ./app/page.tsx:5:10
Ecmascript file had an error
  3 | import { useState } from "react"
  4 | import { Menu, X } from "lucide-react"
> 5 | import { useState } from "react"
    |          ^^^^^^^^
  6 | import { Sidebar } from "@/components/sidebar"
  7 | import { AboutSection } from "@/components/about-section"
  8 | import { NotesList } from "@/components/notes-list"

the name `useState` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:14:14.278] Server  LOG      ✓ Compiled in 33ms
[00:14:15.281] Browser ERROR   ./app/page.tsx:5:10
Ecmascript file had an error
  3 | import { useState } from "react"
  4 | import { Menu, X } from "lucide-react"
> 5 | import { useState } from "react"
    |          ^^^^^^^^
  6 | import { Sidebar } from "@/components/sidebar"
  7 | import { AboutSection } from "@/components/about-section"
  8 | import { NotesList } from "@/components/notes-list"

the name `useState` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]
[00:15:39.195] Server  LOG      ✓ Compiled in 32ms
